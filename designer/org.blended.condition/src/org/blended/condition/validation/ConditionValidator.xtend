/*
 * generated by Xtext
 */
package org.blended.condition.validation

import org.eclipse.xtext.validation.Check
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.blended.condition.condition.ConditionModel
import org.blended.condition.condition.ConditionPackage
import org.blended.condition.repository.WriteConditionModelService

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ConditionValidator extends AbstractConditionValidator {

	@Check
	def checkModel(ConditionModel model) {
//	 	info('ConditionModel OK 0', ConditionPackage.Literals.CONDITION_MODEL__SPECIFICATION)
//		var instance = WriteConditionModelService.getInstance
//		info('ConditionModel OK 1', ConditionPackage.Literals.CONDITION_MODEL__SPECIFICATION)
//		var specId = model.eResource.normalizedURI.lastSegment.split("\\.").get(0)
//		var notification = instance.write(specId, model)
//		info('ConditionModel OK 2', ConditionPackage.Literals.CONDITION_MODEL__SPECIFICATION)
//		if (notification.hasErrors)
//			for (error : notification.error)
//				error(error.type.toString + "-" + error.value, ConditionPackage.Literals.CONDITION_MODEL__SPECIFICATION)
//		else
//			info('ConditionModel OK 3', ConditionPackage.Literals.CONDITION_MODEL__SPECIFICATION)
	}
		
}
