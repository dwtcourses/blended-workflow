/**
 * generated by Xtext
 */
package org.blended.condition.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.List;
import org.blended.blended.AttributeAchieveCondition;
import org.blended.blended.AttributeDependenceCondition;
import org.blended.blended.AttributeInvariantCondition;
import org.blended.blended.EntityAchieveCondition;
import org.blended.blended.EntityDependenceCondition;
import org.blended.blended.EntityInvariantCondition;
import org.blended.blended.Expression;
import org.blended.condition.generator.ConditionGeneratorGoalModel;
import org.blended.generator.CustomOutputConfigurationProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ConditionGeneratorActivityModel {
  /**
   * def addInPosts(String s, Type type) {
   * switch (type) {
   * case Ent: {
   * var t = postsEnt.get(i)
   * t.add(s)
   * postsEnt.set(i, t)
   * }
   * case Att: {
   * var t = postsAtt.get(i)
   * t.add(s)
   * postsAtt.set(i, t)
   * }
   * }
   * }
   * 
   * def isInPosts(String s, Type type) {
   * switch (type) {
   * case Ent: {
   * var t = postsEnt.get(i)
   * return t.contains(s)
   * }
   * case Att: {
   * var t = postsAtt.get(i)
   * return t.contains(s)
   * }
   * }
   * }
   */
  public enum Type {
    Ent,
    
    Att;
  }
  
  private Resource resource;
  
  private IFileSystemAccess fsa;
  
  private StringBuilder sb;
  
  private List<StringBuilder> sbs;
  
  private Integer i;
  
  public ConditionGeneratorActivityModel(final Resource resource, final IFileSystemAccess fsa) {
    this.resource = resource;
    this.fsa = fsa;
    StringBuilder _stringBuilder = new StringBuilder();
    this.sb = _stringBuilder;
    ArrayList<StringBuilder> _arrayList = new ArrayList<StringBuilder>();
    this.sbs = _arrayList;
    this.i = Integer.valueOf(0);
  }
  
  public void doGenerate() {
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<EntityAchieveCondition> _filter = Iterables.<EntityAchieveCondition>filter(_iterable, EntityAchieveCondition.class);
    for (final EntityAchieveCondition r : _filter) {
      {
        StringBuilder _activity = this.activity(r);
        StringBuilder sb = new StringBuilder(_activity);
        this.sbs.add(sb);
        this.i++;
      }
    }
    for (final StringBuilder part : this.sbs) {
      this.sb.append(part);
    }
    URI _normalizedURI = EcoreUtil2.getNormalizedURI(this.resource);
    String _lastSegment = _normalizedURI.lastSegment();
    String _replace = _lastSegment.replace(".cm", ".am");
    String _string = this.sb.toString();
    this.fsa.generateFile(_replace, CustomOutputConfigurationProvider.SRC_OUTPUT, _string);
  }
  
  public StringBuilder activity(final EntityAchieveCondition eac) {
    StringBuilder _xblockexpression = null;
    {
      StringBuilder sb = new StringBuilder();
      sb.append(((((("a" + Integer.valueOf(((this.i).intValue() + 1))) + ":") + " \"Activity number ") + Integer.valueOf(((this.i).intValue() + 1))) + "\"\r\n"));
      String _processPre = this.processPre(eac);
      String _plus = ("\tPRE(" + _processPre);
      String _plus_1 = (_plus + "),\r\n\tPOST(");
      String _processPost = this.processPost(eac);
      String _plus_2 = (_plus_1 + _processPost);
      String _plus_3 = (_plus_2 + ")\r\n\r\n");
      _xblockexpression = sb.append(_plus_3);
    }
    return _xblockexpression;
  }
  
  public String processPre(final EntityAchieveCondition eac) {
    String s2 = this.step2(eac);
    return s2;
  }
  
  public String processPost(final EntityAchieveCondition eac) {
    String s1 = this.step1(eac);
    String s4 = this.step4(eac);
    return (s1 + s4);
  }
  
  public String step1(final EntityAchieveCondition eac) {
    String _xblockexpression = null;
    {
      StringBuilder s = new StringBuilder();
      String _name = eac.getName();
      String _plus = ("DEF(" + _name);
      String _plus_1 = (_plus + ")");
      s.append(_plus_1);
      TreeIterator<EObject> _allContents = this.resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<AttributeAchieveCondition> _filter = Iterables.<AttributeAchieveCondition>filter(_iterable, AttributeAchieveCondition.class);
      for (final AttributeAchieveCondition aList : _filter) {
        {
          boolean found = false;
          StringBuilder def = new StringBuilder();
          int j = 1;
          EList<String> _conditions = aList.getConditions();
          for (final String a : _conditions) {
            {
              int _indexOf = a.indexOf(".");
              String entity = a.substring(0, _indexOf);
              if ((j == 1)) {
                def.append(a);
                j++;
              } else {
                def.append((", " + a));
              }
              String _name_1 = eac.getName();
              boolean _equals = Objects.equal(_name_1, entity);
              if (_equals) {
                found = true;
              }
            }
          }
          if (found) {
            s.append(((", DEF(" + def) + ")"));
          }
        }
      }
      _xblockexpression = s.toString();
    }
    return _xblockexpression;
  }
  
  public String step2(final EntityAchieveCondition eac) {
    StringBuilder s = new StringBuilder();
    int j = 1;
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<EntityDependenceCondition> _filter = Iterables.<EntityDependenceCondition>filter(_iterable, EntityDependenceCondition.class);
    for (final EntityDependenceCondition r : _filter) {
      String _name = eac.getName();
      String _entity1 = r.getEntity1();
      boolean _equals = Objects.equal(_name, _entity1);
      if (_equals) {
        if ((j == 1)) {
          String _entity2 = r.getEntity2();
          String _plus = ("DEF(" + _entity2);
          String _plus_1 = (_plus + ")");
          s.append(_plus_1);
          j++;
        } else {
          String _entity2_1 = r.getEntity2();
          String _plus_2 = (", DEF(" + _entity2_1);
          String _plus_3 = (_plus_2 + ")");
          s.append(_plus_3);
        }
      }
    }
    TreeIterator<EObject> _allContents_1 = this.resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<AttributeDependenceCondition> _filter_1 = Iterables.<AttributeDependenceCondition>filter(_iterable_1, AttributeDependenceCondition.class);
    for (final AttributeDependenceCondition aList : _filter_1) {
      {
        ArrayList<String> founds = new ArrayList<String>();
        EList<String> _attributes1 = aList.getAttributes1();
        for (final String a : _attributes1) {
          {
            int _indexOf = a.indexOf(".");
            String entity1 = a.substring(0, _indexOf);
            String _name_1 = eac.getName();
            boolean _equals_1 = _name_1.equals(entity1);
            if (_equals_1) {
              boolean _contains = founds.contains(entity1);
              boolean _not = (!_contains);
              if (_not) {
                founds.add(entity1);
                if ((j == 1)) {
                  String _attribute2 = aList.getAttribute2();
                  String _plus_4 = ("DEF(" + _attribute2);
                  String _plus_5 = (_plus_4 + ")");
                  s.append(_plus_5);
                  j++;
                } else {
                  String _attribute2_1 = aList.getAttribute2();
                  String _plus_6 = (", DEF(" + _attribute2_1);
                  String _plus_7 = (_plus_6 + ")");
                  s.append(_plus_7);
                }
              }
            }
          }
        }
      }
    }
    return s.toString();
  }
  
  /**
   * def step3() {
   * var s = new StringBuilder()
   * var j = 1
   * //if (i==1) addInPosts("Data.episode", Type.Att)
   * for (a : postsAtt.get(i)) {
   * var entity = a.substring(0, a.indexOf('.'))
   * if (!isInPosts(entity, Type.Att)) {
   * if (j==1) {
   * s.append('PRE(' + entity  + ')')
   * j++
   * }
   * else s.append(', PRE(' + entity  + ')')
   * }
   * }
   * return s.toString
   * }
   */
  public String step4(final EntityAchieveCondition eac) {
    StringBuilder s = new StringBuilder();
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<EntityInvariantCondition> _filter = Iterables.<EntityInvariantCondition>filter(_iterable, EntityInvariantCondition.class);
    for (final EntityInvariantCondition r : _filter) {
      {
        String _name = r.getName();
        String _name_1 = r.getName();
        int _indexOf = _name_1.indexOf(".");
        String entity = _name.substring(0, _indexOf);
        String _name_2 = eac.getName();
        boolean _equals = Objects.equal(_name_2, entity);
        if (_equals) {
          String _name_3 = r.getName();
          String _plus = (", MUL(" + _name_3);
          String _plus_1 = (_plus + ", ");
          String _cardinality = r.getCardinality();
          String _plus_2 = (_plus_1 + _cardinality);
          String _plus_3 = (_plus_2 + ")");
          s.append(_plus_3);
        }
      }
    }
    TreeIterator<EObject> _allContents_1 = this.resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<AttributeInvariantCondition> _filter_1 = Iterables.<AttributeInvariantCondition>filter(_iterable_1, AttributeInvariantCondition.class);
    for (final AttributeInvariantCondition a : _filter_1) {
      {
        ArrayList<String> founds = new ArrayList<String>();
        Expression _expression = a.getExpression();
        ArrayList<String> _decomposedExpression = ConditionGeneratorGoalModel.getDecomposedExpression(_expression);
        for (final String e : _decomposedExpression) {
          {
            int _indexOf = e.indexOf(".");
            String entity1 = e.substring(0, _indexOf);
            String _name = eac.getName();
            boolean _equals = _name.equals(entity1);
            if (_equals) {
              boolean _contains = founds.contains(entity1);
              boolean _not = (!_contains);
              if (_not) {
                founds.add(entity1);
                Expression _expression_1 = a.getExpression();
                String _completeExpression = ConditionGeneratorGoalModel.getCompleteExpression(_expression_1);
                String _plus = (", RUL(" + _completeExpression);
                String _plus_1 = (_plus + ")");
                s.append(_plus_1);
              }
            }
          }
        }
      }
    }
    return s.toString();
  }
}
