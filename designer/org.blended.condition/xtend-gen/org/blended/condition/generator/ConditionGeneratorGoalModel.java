/**
 * generated by Xtext
 */
package org.blended.condition.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.List;
import org.blended.blended.And;
import org.blended.blended.AttributeAchieveCondition;
import org.blended.blended.AttributeDefinition;
import org.blended.blended.AttributeDependenceCondition;
import org.blended.blended.AttributeInvariantCondition;
import org.blended.blended.AttributeValue;
import org.blended.blended.EntityAchieveCondition;
import org.blended.blended.EntityDependenceCondition;
import org.blended.blended.EntityInvariantCondition;
import org.blended.blended.Expression;
import org.blended.blended.MandatoryAttributeAchieveCondition;
import org.blended.blended.Not;
import org.blended.blended.Or;
import org.blended.generator.CustomOutputConfigurationProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ConditionGeneratorGoalModel {
  private Resource resource;
  
  private IFileSystemAccess fsa;
  
  private StringBuilder sb;
  
  private List<StringBuilder> sbs;
  
  private int numberOfEntities;
  
  private int numberOfAttributes;
  
  public ConditionGeneratorGoalModel(final Resource resource, final IFileSystemAccess fsa) {
    this.resource = resource;
    this.fsa = fsa;
    StringBuilder _stringBuilder = new StringBuilder();
    this.sb = _stringBuilder;
    ArrayList<StringBuilder> _arrayList = new ArrayList<StringBuilder>();
    this.sbs = _arrayList;
  }
  
  public void doGenerate() {
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<EntityAchieveCondition> _filter = Iterables.<EntityAchieveCondition>filter(_iterable, EntityAchieveCondition.class);
    int _size = IterableExtensions.size(_filter);
    this.numberOfEntities = _size;
    TreeIterator<EObject> _allContents_1 = this.resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<AttributeAchieveCondition> _filter_1 = Iterables.<AttributeAchieveCondition>filter(_iterable_1, AttributeAchieveCondition.class);
    int _size_1 = IterableExtensions.size(_filter_1);
    this.numberOfAttributes = _size_1;
    this.insertParts();
    for (final StringBuilder part : this.sbs) {
      this.sb.append(part);
    }
    URI _normalizedURI = EcoreUtil2.getNormalizedURI(this.resource);
    String _lastSegment = _normalizedURI.lastSegment();
    String _replace = _lastSegment.replace(".cm", ".gm");
    String _string = this.sb.toString();
    this.fsa.generateFile(_replace, CustomOutputConfigurationProvider.SRC_OUTPUT, _string);
  }
  
  public CharSequence insertParts() {
    StringConcatenation _builder = new StringConcatenation();
    boolean _rootGoal = this.rootGoal();
    _builder.append(_rootGoal, "");
    _builder.newLineIfNotEmpty();
    this.goalsBasedOnEntities();
    _builder.newLineIfNotEmpty();
    this.goalsBasedOnAttributes();
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public boolean rootGoal() {
    boolean _xblockexpression = false;
    {
      String _rootGoalSubs = this.rootGoalSubs();
      String _plus = ("g0: SUC(nothing), SUB(" + _rootGoalSubs);
      String _plus_1 = (_plus + ")\r\n");
      StringBuilder sb = new StringBuilder(_plus_1);
      _xblockexpression = this.sbs.add(sb);
    }
    return _xblockexpression;
  }
  
  public String rootGoalSubs() {
    StringBuilder sb = new StringBuilder();
    for (int i = 1; (i <= this.numberOfEntities); i++) {
      if ((i == 1)) {
        sb.append(("g" + Integer.valueOf(i)));
      } else {
        sb.append((", g" + Integer.valueOf(i)));
      }
    }
    return sb.toString();
  }
  
  public void goalsBasedOnEntities() {
    int i = 1;
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<EntityAchieveCondition> _filter = Iterables.<EntityAchieveCondition>filter(_iterable, EntityAchieveCondition.class);
    for (final EntityAchieveCondition r : _filter) {
      {
        CharSequence _goalBasedOnEntity = this.goalBasedOnEntity(r, i);
        StringBuilder sb = new StringBuilder(_goalBasedOnEntity);
        this.sbs.add(sb);
        i++;
      }
    }
  }
  
  public CharSequence goalBasedOnEntity(final EntityAchieveCondition eac, final int numberOfGoal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("g");
    _builder.append(numberOfGoal, "");
    _builder.append(": ");
    String _sucsEntity = this.sucsEntity(eac);
    _builder.append(_sucsEntity, "");
    String _actsEntity = this.actsEntity(eac);
    _builder.append(_actsEntity, "");
    String _invsEntity = this.invsEntity(eac);
    _builder.append(_invsEntity, "");
    String _subsEntity = this.subsEntity(eac);
    _builder.append(_subsEntity, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String sucsEntity(final EntityAchieveCondition eac) {
    String _name = eac.getName();
    String _plus = ("SUC(DEF(" + _name);
    return (_plus + "))");
  }
  
  public String actsEntity(final EntityAchieveCondition eac) {
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<EntityDependenceCondition> _filter = Iterables.<EntityDependenceCondition>filter(_iterable, EntityDependenceCondition.class);
    for (final EntityDependenceCondition r : _filter) {
      String _entity1 = r.getEntity1();
      String _name = eac.getName();
      boolean _equals = Objects.equal(_entity1, _name);
      if (_equals) {
        String _entity2 = r.getEntity2();
        String _plus = (", ACT(DEF(" + _entity2);
        return (_plus + "))");
      }
    }
    return null;
  }
  
  public String invsEntity(final EntityAchieveCondition eac) {
    StringBuilder sb = new StringBuilder();
    int i = 0;
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<EntityInvariantCondition> _filter = Iterables.<EntityInvariantCondition>filter(_iterable, EntityInvariantCondition.class);
    for (final EntityInvariantCondition r : _filter) {
      String _name = r.getName();
      String _entityNameFromAttribute = this.getEntityNameFromAttribute(_name);
      String _name_1 = eac.getName();
      boolean _equals = Objects.equal(_entityNameFromAttribute, _name_1);
      if (_equals) {
        if ((i == 0)) {
          String _name_2 = r.getName();
          String _plus = ("MUL(" + _name_2);
          String _plus_1 = (_plus + ",");
          String _cardinality = r.getCardinality();
          String _plus_2 = (_plus_1 + _cardinality);
          String _plus_3 = (_plus_2 + ")");
          sb.append(_plus_3);
          i++;
        } else {
          String _name_3 = r.getName();
          String _plus_4 = (", MUL(" + _name_3);
          String _plus_5 = (_plus_4 + ",");
          String _cardinality_1 = r.getCardinality();
          String _plus_6 = (_plus_5 + _cardinality_1);
          String _plus_7 = (_plus_6 + ")");
          sb.append(_plus_7);
        }
      }
    }
    int _length = sb.length();
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      String _string = sb.toString();
      String _plus_8 = (", INV(" + _string);
      return (_plus_8 + ")");
    }
    return null;
  }
  
  public String subsEntity(final EntityAchieveCondition eac) {
    StringBuilder sb = new StringBuilder();
    int i = 0;
    int numberOfAttribute = 1;
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<AttributeAchieveCondition> _filter = Iterables.<AttributeAchieveCondition>filter(_iterable, AttributeAchieveCondition.class);
    for (final AttributeAchieveCondition r : _filter) {
      {
        boolean used = false;
        EList<String> _conditions = r.getConditions();
        for (final String att : _conditions) {
          String _entityNameFromAttribute = this.getEntityNameFromAttribute(att);
          String _name = eac.getName();
          boolean _equals = Objects.equal(_entityNameFromAttribute, _name);
          if (_equals) {
            if ((i == 0)) {
              if ((!used)) {
                sb.append(("g" + Integer.valueOf((this.numberOfEntities + numberOfAttribute))));
              }
              used = true;
              i++;
            } else {
              if ((!used)) {
                sb.append((", g" + Integer.valueOf((this.numberOfEntities + numberOfAttribute))));
              }
              used = true;
            }
          }
        }
        numberOfAttribute++;
      }
    }
    int _length = sb.length();
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      String _string = sb.toString();
      String _plus = (", SUB(" + _string);
      return (_plus + ")");
    }
    return null;
  }
  
  public void goalsBasedOnAttributes() {
    int i = (this.numberOfEntities + 1);
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<AttributeAchieveCondition> _filter = Iterables.<AttributeAchieveCondition>filter(_iterable, AttributeAchieveCondition.class);
    for (final AttributeAchieveCondition r : _filter) {
      {
        CharSequence _goalBasedOnAttribute = this.goalBasedOnAttribute(r, i);
        StringBuilder sb = new StringBuilder(_goalBasedOnAttribute);
        this.sbs.add(sb);
        i++;
      }
    }
  }
  
  public CharSequence goalBasedOnAttribute(final AttributeAchieveCondition aac, final int numberOfGoal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("g");
    _builder.append(numberOfGoal, "");
    _builder.append(": ");
    String _sucsAttribute = this.sucsAttribute(aac);
    _builder.append(_sucsAttribute, "");
    String _actsAttribute = this.actsAttribute(aac);
    _builder.append(_actsAttribute, "");
    String _invsAttribute = this.invsAttribute(aac);
    _builder.append(_invsAttribute, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String sucsAttribute(final AttributeAchieveCondition aac) {
    String _xifexpression = null;
    boolean _isMandatoryAttribute = this.isMandatoryAttribute(aac);
    if (_isMandatoryAttribute) {
      EList<String> _conditions = aac.getConditions();
      String _attributeNames = this.getAttributeNames(_conditions);
      String _plus = ("SUC(MAN(DEF(" + _attributeNames);
      _xifexpression = (_plus + ")))");
    } else {
      EList<String> _conditions_1 = aac.getConditions();
      String _attributeNames_1 = this.getAttributeNames(_conditions_1);
      String _plus_1 = ("SUC(DEF(" + _attributeNames_1);
      _xifexpression = (_plus_1 + "))");
    }
    return _xifexpression;
  }
  
  public String actsAttribute(final AttributeAchieveCondition aac) {
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<AttributeDependenceCondition> _filter = Iterables.<AttributeDependenceCondition>filter(_iterable, AttributeDependenceCondition.class);
    for (final AttributeDependenceCondition r : _filter) {
      EList<String> _attributes1 = r.getAttributes1();
      String _attributeNames = this.getAttributeNames(_attributes1);
      EList<String> _conditions = aac.getConditions();
      String _attributeNames_1 = this.getAttributeNames(_conditions);
      boolean _equals = Objects.equal(_attributeNames, _attributeNames_1);
      if (_equals) {
        String _attribute2 = r.getAttribute2();
        String _plus = (", ACT(DEF(" + _attribute2);
        return (_plus + "))");
      }
    }
    return null;
  }
  
  public String invsAttribute(final AttributeAchieveCondition aac) {
    StringBuilder sb = new StringBuilder();
    int i = 0;
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<AttributeInvariantCondition> _filter = Iterables.<AttributeInvariantCondition>filter(_iterable, AttributeInvariantCondition.class);
    for (final AttributeInvariantCondition r : _filter) {
      EList<String> _conditions = aac.getConditions();
      for (final String ele1 : _conditions) {
        {
          boolean used = false;
          Expression _expression = r.getExpression();
          ArrayList<String> _decomposedExpression = ConditionGeneratorGoalModel.getDecomposedExpression(_expression);
          for (final String ele2 : _decomposedExpression) {
            String _lowerCase = ele1.toLowerCase();
            String _lowerCase_1 = ele2.toLowerCase();
            boolean _equals = Objects.equal(_lowerCase, _lowerCase_1);
            if (_equals) {
              if ((i == 0)) {
                if ((!used)) {
                  Expression _expression_1 = r.getExpression();
                  String _completeExpression = ConditionGeneratorGoalModel.getCompleteExpression(_expression_1);
                  String _plus = ("RUL(" + _completeExpression);
                  String _plus_1 = (_plus + ")");
                  sb.append(_plus_1);
                }
                used = true;
                i++;
              } else {
                if ((!used)) {
                  Expression _expression_2 = r.getExpression();
                  String _completeExpression_1 = ConditionGeneratorGoalModel.getCompleteExpression(_expression_2);
                  String _plus_2 = (", RUL(" + _completeExpression_1);
                  String _plus_3 = (_plus_2 + ")");
                  sb.append(_plus_3);
                }
                used = true;
              }
            }
          }
        }
      }
    }
    int _length = sb.length();
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      String _string = sb.toString();
      String _plus = (", INV(" + _string);
      return (_plus + ")");
    }
    return null;
  }
  
  public boolean isMandatoryAttribute(final AttributeAchieveCondition aac) {
    if ((aac instanceof MandatoryAttributeAchieveCondition)) {
      return true;
    } else {
      return false;
    }
  }
  
  public String getAttributeNames(final List<String> aac) {
    StringBuilder sb = new StringBuilder();
    int i = 0;
    for (final String s : aac) {
      if ((i == 0)) {
        sb.append(s);
        i++;
      } else {
        sb.append(("," + s));
      }
    }
    return sb.toString();
  }
  
  public String getAttributeLastName(final String att) {
    String[] parts = att.split(".");
    final String[] _converted_parts = (String[])parts;
    int _size = ((List<String>)Conversions.doWrapArray(_converted_parts)).size();
    boolean _greaterEqualsThan = (_size >= 2);
    if (_greaterEqualsThan) {
      final String[] _converted_parts_1 = (String[])parts;
      int _size_1 = ((List<String>)Conversions.doWrapArray(_converted_parts_1)).size();
      int _minus = (_size_1 - 2);
      String _get = parts[_minus];
      String _plus = (_get + ".");
      final String[] _converted_parts_2 = (String[])parts;
      int _size_2 = ((List<String>)Conversions.doWrapArray(_converted_parts_2)).size();
      int _minus_1 = (_size_2 - 1);
      String _get_1 = parts[_minus_1];
      return (_plus + _get_1);
    }
    return null;
  }
  
  public String getEntityNameFromAttribute(final String att) {
    int _indexOf = att.indexOf(".");
    return att.substring(0, _indexOf);
  }
  
  public static ArrayList<String> getDecomposedExpression(final Expression e) {
    ArrayList<String> list = new ArrayList<String>();
    ConditionGeneratorGoalModel.getDecomposedExpression(e, list);
    return list;
  }
  
  public static Object getDecomposedExpression(final Expression e, final List<String> list) {
    Object _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (e instanceof AttributeDefinition) {
        _matched=true;
        String _name = ((AttributeDefinition)e).getName();
        _switchResult = Boolean.valueOf(list.add(_name));
      }
    }
    if (!_matched) {
      if (e instanceof AttributeValue) {
        _matched=true;
        String _name = ((AttributeValue)e).getName();
        _switchResult = Boolean.valueOf(list.add(_name));
      }
    }
    if (!_matched) {
      if (e instanceof Not) {
        _matched=true;
        Expression _expression = ((Not)e).getExpression();
        _switchResult = ConditionGeneratorGoalModel.getDecomposedExpression(_expression, list);
      }
    }
    if (!_matched) {
      if (e instanceof And) {
        _matched=true;
        Object _xblockexpression = null;
        {
          Expression _left = ((And)e).getLeft();
          ConditionGeneratorGoalModel.getDecomposedExpression(_left, list);
          Expression _right = ((And)e).getRight();
          _xblockexpression = ConditionGeneratorGoalModel.getDecomposedExpression(_right, list);
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (e instanceof Or) {
        _matched=true;
        Object _xblockexpression = null;
        {
          Expression _left = ((Or)e).getLeft();
          ConditionGeneratorGoalModel.getDecomposedExpression(_left, list);
          Expression _right = ((Or)e).getRight();
          _xblockexpression = ConditionGeneratorGoalModel.getDecomposedExpression(_right, list);
        }
        _switchResult = _xblockexpression;
      }
    }
    return _switchResult;
  }
  
  public static String getCompleteExpression(final Expression e) {
    StringBuilder sb = new StringBuilder();
    ConditionGeneratorGoalModel.getCompleteExpression(e, sb);
    return sb.toString();
  }
  
  public static Object getCompleteExpression(final Expression e, final StringBuilder sb) {
    StringBuilder _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (e instanceof AttributeDefinition) {
        _matched=true;
        String _name = ((AttributeDefinition)e).getName();
        _switchResult = sb.append(_name);
      }
    }
    if (!_matched) {
      if (e instanceof AttributeValue) {
        _matched=true;
        String _name = ((AttributeValue)e).getName();
        _switchResult = sb.append(_name);
      }
    }
    if (!_matched) {
      if (e instanceof Not) {
        _matched=true;
        StringBuilder _xblockexpression = null;
        {
          sb.append("NOT (");
          Expression _expression = ((Not)e).getExpression();
          ConditionGeneratorGoalModel.getCompleteExpression(_expression, sb);
          _xblockexpression = sb.append(")");
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (e instanceof And) {
        _matched=true;
        StringBuilder _xblockexpression = null;
        {
          sb.append("(");
          Expression _left = ((And)e).getLeft();
          ConditionGeneratorGoalModel.getCompleteExpression(_left, sb);
          sb.append(") AND (");
          Expression _right = ((And)e).getRight();
          ConditionGeneratorGoalModel.getCompleteExpression(_right, sb);
          _xblockexpression = sb.append(")");
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (e instanceof Or) {
        _matched=true;
        StringBuilder _xblockexpression = null;
        {
          sb.append("(");
          Expression _left = ((Or)e).getLeft();
          ConditionGeneratorGoalModel.getCompleteExpression(_left, sb);
          sb.append(") OR (");
          Expression _right = ((Or)e).getRight();
          ConditionGeneratorGoalModel.getCompleteExpression(_right, sb);
          _xblockexpression = sb.append(")");
        }
        _switchResult = _xblockexpression;
      }
    }
    return _switchResult;
  }
}
