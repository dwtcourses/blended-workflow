/**
 * generated by Xtext
 */
package org.blended.goal.formatting;

import java.util.List;
import org.blended.goal.services.GoalGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class GoalFormatter extends AbstractDeclarativeFormatter {
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    IGrammarAccess _grammarAccess = this.getGrammarAccess();
    GoalGrammarAccess f = ((GoalGrammarAccess) _grammarAccess);
    c.setAutoLinewrap(200);
    List<Keyword> _findKeywords = f.findKeywords("(");
    for (final Keyword key : _findKeywords) {
      {
        FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
        _setNoSpace.before(key);
        FormattingConfig.NoSpaceLocator _setNoSpace_1 = c.setNoSpace();
        _setNoSpace_1.after(key);
      }
    }
    List<Keyword> _findKeywords_1 = f.findKeywords(")", ":");
    for (final Keyword key_1 : _findKeywords_1) {
      FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
      _setNoSpace.before(key_1);
    }
    List<Keyword> _findKeywords_2 = f.findKeywords(",");
    for (final Keyword key_2 : _findKeywords_2) {
      FormattingConfig.NoSpaceLocator _setNoSpace_1 = c.setNoSpace();
      _setNoSpace_1.before(key_2);
    }
    FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap();
    ParserRule _goalRule = f.getGoalRule();
    _setLinewrap.after(_goalRule);
  }
}
