/*
 * generated by Xtext
 */
package org.blended.goal.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.blended.blended.Activity;
import org.blended.blended.And;
import org.blended.blended.AttributeDefinition;
import org.blended.blended.AttributeDependenceCondition;
import org.blended.blended.AttributeInvariantCondition;
import org.blended.blended.AttributeValue;
import org.blended.blended.BlendedPackage;
import org.blended.blended.Condition;
import org.blended.blended.EntityAchieveCondition;
import org.blended.blended.EntityAchieveConditionExist;
import org.blended.blended.EntityDependenceCondition;
import org.blended.blended.EntityInvariantCondition;
import org.blended.blended.Goal;
import org.blended.blended.MandatoryAttributeAchieveCondition;
import org.blended.blended.Not;
import org.blended.blended.NotMandatoryAttributeAchieveCondition;
import org.blended.blended.Nothing;
import org.blended.blended.Or;
import org.blended.goal.goal.GoalModel;
import org.blended.goal.goal.GoalPackage;
import org.blended.goal.services.GoalGrammarAccess;
import org.blended.serializer.BlendedSemanticSequencer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public class GoalSemanticSequencer extends BlendedSemanticSequencer {

	@Inject
	private GoalGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == BlendedPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case BlendedPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case BlendedPackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case BlendedPackage.ATTRIBUTE_DEFINITION:
				sequence_Atomic(context, (AttributeDefinition) semanticObject); 
				return; 
			case BlendedPackage.ATTRIBUTE_DEPENDENCE_CONDITION:
				sequence_AttributeDependenceCondition(context, (AttributeDependenceCondition) semanticObject); 
				return; 
			case BlendedPackage.ATTRIBUTE_INVARIANT_CONDITION:
				sequence_AttributeInvariantCondition(context, (AttributeInvariantCondition) semanticObject); 
				return; 
			case BlendedPackage.ATTRIBUTE_VALUE:
				sequence_Atomic(context, (AttributeValue) semanticObject); 
				return; 
			case BlendedPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case BlendedPackage.ENTITY_ACHIEVE_CONDITION:
				sequence_EntityAchieveCondition(context, (EntityAchieveCondition) semanticObject); 
				return; 
			case BlendedPackage.ENTITY_ACHIEVE_CONDITION_EXIST:
				sequence_EntityAchieveConditionExist(context, (EntityAchieveConditionExist) semanticObject); 
				return; 
			case BlendedPackage.ENTITY_DEPENDENCE_CONDITION:
				sequence_EntityDependenceCondition(context, (EntityDependenceCondition) semanticObject); 
				return; 
			case BlendedPackage.ENTITY_INVARIANT_CONDITION:
				sequence_EntityInvariantCondition(context, (EntityInvariantCondition) semanticObject); 
				return; 
			case BlendedPackage.GOAL:
				sequence_Goal(context, (Goal) semanticObject); 
				return; 
			case BlendedPackage.MANDATORY_ATTRIBUTE_ACHIEVE_CONDITION:
				sequence_MandatoryAttributeAchieveCondition(context, (MandatoryAttributeAchieveCondition) semanticObject); 
				return; 
			case BlendedPackage.NOT:
				sequence_Primary(context, (Not) semanticObject); 
				return; 
			case BlendedPackage.NOT_MANDATORY_ATTRIBUTE_ACHIEVE_CONDITION:
				sequence_NotMandatoryAttributeAchieveCondition(context, (NotMandatoryAttributeAchieveCondition) semanticObject); 
				return; 
			case BlendedPackage.NOTHING:
				sequence_Nothing(context, (Nothing) semanticObject); 
				return; 
			case BlendedPackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == GoalPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case GoalPackage.GOAL_MODEL:
				sequence_GoalModel(context, (GoalModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     goals+=Goal+
	 */
	protected void sequence_GoalModel(EObject context, GoalModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
