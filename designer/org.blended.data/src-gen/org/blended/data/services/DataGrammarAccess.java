/*
 * generated by Xtext
 */
package org.blended.data.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DataGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cAssociationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssociationsAssociationParserRuleCall_1_0 = (RuleCall)cAssociationsAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintConstraintParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		
		//DataModel:
		//	entities+=Entity* associations+=Association* constraint+=Constraint*;
		@Override public ParserRule getRule() { return rule; }

		//entities+=Entity* associations+=Association* constraint+=Constraint*
		public Group getGroup() { return cGroup; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0() { return cEntitiesEntityParserRuleCall_0_0; }

		//associations+=Association*
		public Assignment getAssociationsAssignment_1() { return cAssociationsAssignment_1; }

		//Association
		public RuleCall getAssociationsAssociationParserRuleCall_1_0() { return cAssociationsAssociationParserRuleCall_1_0; }

		//constraint+=Constraint*
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }

		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_2_0() { return cConstraintConstraintParserRuleCall_2_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExistsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cExistsExistsKeyword_2_0 = (Keyword)cExistsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDependsOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDependsOnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDependsOnEntityCrossReference_3_1_0 = (CrossReference)cDependsOnAssignment_3_1.eContents().get(0);
		private final RuleCall cDependsOnEntityIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDependsOnEntityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cAttributesAlternatives_5_0 = (Alternatives)cAttributesAssignment_5.eContents().get(0);
		private final RuleCall cAttributesAttributeGroupParserRuleCall_5_0_0 = (RuleCall)cAttributesAlternatives_5_0.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0_1 = (RuleCall)cAttributesAlternatives_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity:
		//	"Entityy" name=ID exists?="exists"? ("dependsOn" dependsOn=[Entity])? "{" attributes+=(AttributeGroup | Attribute)*
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"Entityy" name=ID exists?="exists"? ("dependsOn" dependsOn=[Entity])? "{" attributes+=(AttributeGroup | Attribute)* "}"
		public Group getGroup() { return cGroup; }

		//"Entityy"
		public Keyword getEntityyKeyword_0() { return cEntityyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//exists?="exists"?
		public Assignment getExistsAssignment_2() { return cExistsAssignment_2; }

		//"exists"
		public Keyword getExistsExistsKeyword_2_0() { return cExistsExistsKeyword_2_0; }

		//("dependsOn" dependsOn=[Entity])?
		public Group getGroup_3() { return cGroup_3; }

		//"dependsOn"
		public Keyword getDependsOnKeyword_3_0() { return cDependsOnKeyword_3_0; }

		//dependsOn=[Entity]
		public Assignment getDependsOnAssignment_3_1() { return cDependsOnAssignment_3_1; }

		//[Entity]
		public CrossReference getDependsOnEntityCrossReference_3_1_0() { return cDependsOnEntityCrossReference_3_1_0; }

		//ID
		public RuleCall getDependsOnEntityIDTerminalRuleCall_3_1_0_1() { return cDependsOnEntityIDTerminalRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//attributes+=(AttributeGroup | Attribute)*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }

		//AttributeGroup | Attribute
		public Alternatives getAttributesAlternatives_5_0() { return cAttributesAlternatives_5_0; }

		//AttributeGroup
		public RuleCall getAttributesAttributeGroupParserRuleCall_5_0_0() { return cAttributesAttributeGroupParserRuleCall_5_0_0; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0_1() { return cAttributesAttributeParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cMandatoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMandatoryMandatoryKeyword_3_0 = (Keyword)cMandatoryAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDependsOnKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDependsOnAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDependsOnAttributeCrossReference_4_1_0 = (CrossReference)cDependsOnAssignment_4_1.eContents().get(0);
		private final RuleCall cDependsOnAttributeQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cDependsOnAttributeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cDependsOnAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cDependsOnAttributeCrossReference_4_2_1_0 = (CrossReference)cDependsOnAssignment_4_2_1.eContents().get(0);
		private final RuleCall cDependsOnAttributeQualifiedNameParserRuleCall_4_2_1_0_1 = (RuleCall)cDependsOnAttributeCrossReference_4_2_1_0.eContents().get(1);
		
		//Attribute:
		//	name=QualifiedName ":" type=ID mandatory?="mandatory"? ("dependsOn" dependsOn+=[Attribute|QualifiedName] (","
		//	dependsOn+=[Attribute|QualifiedName])*)?;
		@Override public ParserRule getRule() { return rule; }

		//name=QualifiedName ":" type=ID mandatory?="mandatory"? ("dependsOn" dependsOn+=[Attribute|QualifiedName] (","
		//dependsOn+=[Attribute|QualifiedName])*)?
		public Group getGroup() { return cGroup; }

		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }

		//mandatory?="mandatory"?
		public Assignment getMandatoryAssignment_3() { return cMandatoryAssignment_3; }

		//"mandatory"
		public Keyword getMandatoryMandatoryKeyword_3_0() { return cMandatoryMandatoryKeyword_3_0; }

		//("dependsOn" dependsOn+=[Attribute|QualifiedName] ("," dependsOn+=[Attribute|QualifiedName])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"dependsOn"
		public Keyword getDependsOnKeyword_4_0() { return cDependsOnKeyword_4_0; }

		//dependsOn+=[Attribute|QualifiedName]
		public Assignment getDependsOnAssignment_4_1() { return cDependsOnAssignment_4_1; }

		//[Attribute|QualifiedName]
		public CrossReference getDependsOnAttributeCrossReference_4_1_0() { return cDependsOnAttributeCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getDependsOnAttributeQualifiedNameParserRuleCall_4_1_0_1() { return cDependsOnAttributeQualifiedNameParserRuleCall_4_1_0_1; }

		//("," dependsOn+=[Attribute|QualifiedName])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//dependsOn+=[Attribute|QualifiedName]
		public Assignment getDependsOnAssignment_4_2_1() { return cDependsOnAssignment_4_2_1; }

		//[Attribute|QualifiedName]
		public CrossReference getDependsOnAttributeCrossReference_4_2_1_0() { return cDependsOnAttributeCrossReference_4_2_1_0; }

		//QualifiedName
		public RuleCall getDependsOnAttributeQualifiedNameParserRuleCall_4_2_1_0_1() { return cDependsOnAttributeQualifiedNameParserRuleCall_4_2_1_0_1; }
	}

	public class AttributeGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMandatoryMandatoryKeyword_1_0 = (Keyword)cMandatoryAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDependsOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDependsOnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDependsOnAttributeCrossReference_2_1_0 = (CrossReference)cDependsOnAssignment_2_1.eContents().get(0);
		private final RuleCall cDependsOnAttributeQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cDependsOnAttributeCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDependsOnAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cDependsOnAttributeCrossReference_2_2_1_0 = (CrossReference)cDependsOnAssignment_2_2_1.eContents().get(0);
		private final RuleCall cDependsOnAttributeQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cDependsOnAttributeCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttributeGroup:
		//	"group" mandatory?="mandatory"? ("dependsOn" dependsOn+=[Attribute|QualifiedName] (","
		//	dependsOn+=[Attribute|QualifiedName])*)? "{" attributes+=Attribute+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"group" mandatory?="mandatory"? ("dependsOn" dependsOn+=[Attribute|QualifiedName] (","
		//dependsOn+=[Attribute|QualifiedName])*)? "{" attributes+=Attribute+ "}"
		public Group getGroup() { return cGroup; }

		//"group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//mandatory?="mandatory"?
		public Assignment getMandatoryAssignment_1() { return cMandatoryAssignment_1; }

		//"mandatory"
		public Keyword getMandatoryMandatoryKeyword_1_0() { return cMandatoryMandatoryKeyword_1_0; }

		//("dependsOn" dependsOn+=[Attribute|QualifiedName] ("," dependsOn+=[Attribute|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"dependsOn"
		public Keyword getDependsOnKeyword_2_0() { return cDependsOnKeyword_2_0; }

		//dependsOn+=[Attribute|QualifiedName]
		public Assignment getDependsOnAssignment_2_1() { return cDependsOnAssignment_2_1; }

		//[Attribute|QualifiedName]
		public CrossReference getDependsOnAttributeCrossReference_2_1_0() { return cDependsOnAttributeCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getDependsOnAttributeQualifiedNameParserRuleCall_2_1_0_1() { return cDependsOnAttributeQualifiedNameParserRuleCall_2_1_0_1; }

		//("," dependsOn+=[Attribute|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//dependsOn+=[Attribute|QualifiedName]
		public Assignment getDependsOnAssignment_2_2_1() { return cDependsOnAssignment_2_2_1; }

		//[Attribute|QualifiedName]
		public CrossReference getDependsOnAttributeCrossReference_2_2_1_0() { return cDependsOnAttributeCrossReference_2_2_1_0; }

		//QualifiedName
		public RuleCall getDependsOnAttributeQualifiedNameParserRuleCall_2_2_1_0_1() { return cDependsOnAttributeQualifiedNameParserRuleCall_2_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//attributes+=Attribute+
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntity1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntity1EntityCrossReference_2_0 = (CrossReference)cEntity1Assignment_2.eContents().get(0);
		private final RuleCall cEntity1EntityIDTerminalRuleCall_2_0_1 = (RuleCall)cEntity1EntityCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cName1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cName1IDTerminalRuleCall_4_0 = (RuleCall)cName1Assignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCardinality1Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCardinality1CardinalityParserRuleCall_6_0 = (RuleCall)cCardinality1Assignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEntity2Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cEntity2EntityCrossReference_8_0 = (CrossReference)cEntity2Assignment_8.eContents().get(0);
		private final RuleCall cEntity2EntityIDTerminalRuleCall_8_0_1 = (RuleCall)cEntity2EntityCrossReference_8_0.eContents().get(1);
		private final Keyword cWithKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cName2Assignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cName2IDTerminalRuleCall_10_0 = (RuleCall)cName2Assignment_10.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cCardinality2Assignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cCardinality2CardinalityParserRuleCall_12_0 = (RuleCall)cCardinality2Assignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Association:
		//	"Association" "{" entity1=[Entity] "with" name1=ID "(" cardinality1=Cardinality ")" entity2=[Entity] "with" name2=ID
		//	"(" cardinality2=Cardinality ")" "}";
		@Override public ParserRule getRule() { return rule; }

		//"Association" "{" entity1=[Entity] "with" name1=ID "(" cardinality1=Cardinality ")" entity2=[Entity] "with" name2=ID "("
		//cardinality2=Cardinality ")" "}"
		public Group getGroup() { return cGroup; }

		//"Association"
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//entity1=[Entity]
		public Assignment getEntity1Assignment_2() { return cEntity1Assignment_2; }

		//[Entity]
		public CrossReference getEntity1EntityCrossReference_2_0() { return cEntity1EntityCrossReference_2_0; }

		//ID
		public RuleCall getEntity1EntityIDTerminalRuleCall_2_0_1() { return cEntity1EntityIDTerminalRuleCall_2_0_1; }

		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }

		//name1=ID
		public Assignment getName1Assignment_4() { return cName1Assignment_4; }

		//ID
		public RuleCall getName1IDTerminalRuleCall_4_0() { return cName1IDTerminalRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//cardinality1=Cardinality
		public Assignment getCardinality1Assignment_6() { return cCardinality1Assignment_6; }

		//Cardinality
		public RuleCall getCardinality1CardinalityParserRuleCall_6_0() { return cCardinality1CardinalityParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//entity2=[Entity]
		public Assignment getEntity2Assignment_8() { return cEntity2Assignment_8; }

		//[Entity]
		public CrossReference getEntity2EntityCrossReference_8_0() { return cEntity2EntityCrossReference_8_0; }

		//ID
		public RuleCall getEntity2EntityIDTerminalRuleCall_8_0_1() { return cEntity2EntityIDTerminalRuleCall_8_0_1; }

		//"with"
		public Keyword getWithKeyword_9() { return cWithKeyword_9; }

		//name2=ID
		public Assignment getName2Assignment_10() { return cName2Assignment_10; }

		//ID
		public RuleCall getName2IDTerminalRuleCall_10_0() { return cName2IDTerminalRuleCall_10_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }

		//cardinality2=Cardinality
		public Assignment getCardinality2Assignment_12() { return cCardinality2Assignment_12; }

		//Cardinality
		public RuleCall getCardinality2CardinalityParserRuleCall_12_0() { return cCardinality2CardinalityParserRuleCall_12_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintExpressionParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		
		//Constraint:
		//	"Constraint" ":" constraint=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"Constraint" ":" constraint=Expression
		public Group getGroup() { return cGroup; }

		//"Constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//constraint=Expression
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }

		//Expression
		public RuleCall getConstraintExpressionParserRuleCall_2_0() { return cConstraintExpressionParserRuleCall_2_0; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cAsteriskKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Cardinality:
		//	INT | INT ".." INT | INT ".." "*" | INT ".." "+";
		@Override public ParserRule getRule() { return rule; }

		//INT | INT ".." INT | INT ".." "*" | INT ".." "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//INT ".." INT
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }

		//INT ".." "*"
		public Group getGroup_2() { return cGroup_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//"*"
		public Keyword getAsteriskKeyword_2_2() { return cAsteriskKeyword_2_2; }

		//INT ".." "+"
		public Group getGroup_3() { return cGroup_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_0() { return cINTTerminalRuleCall_3_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_1() { return cFullStopFullStopKeyword_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_3_2() { return cPlusSignKeyword_3_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//	And ({Or.left=current} "OR" right=And)*;
		@Override public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "OR" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "OR" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//	Primary ({And.left=current} "AND" right=Primary)*;
		@Override public ParserRule getRule() { return rule; }

		//Primary ({And.left=current} "AND" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({And.left=current} "AND" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNOTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns Expression:
		//	"(" Expression ")" | {Not} "NOT" expression=Primary | Atomic;
		@Override public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {Not} "NOT" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{Not} "NOT" expression=Primary
		public Group getGroup_1() { return cGroup_1; }

		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }

		//"NOT"
		public Keyword getNOTKeyword_1_1() { return cNOTKeyword_1_1; }

		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttributeDefinitionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDEFKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttributeValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//Atomic returns Expression:
		//	{AttributeDefinition} "DEF" "(" name=QualifiedName ")" | {AttributeValue} name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//{AttributeDefinition} "DEF" "(" name=QualifiedName ")" | {AttributeValue} name=QualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttributeDefinition} "DEF" "(" name=QualifiedName ")"
		public Group getGroup_0() { return cGroup_0; }

		//{AttributeDefinition}
		public Action getAttributeDefinitionAction_0_0() { return cAttributeDefinitionAction_0_0; }

		//"DEF"
		public Keyword getDEFKeyword_0_1() { return cDEFKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_3_0() { return cNameQualifiedNameParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//{AttributeValue} name=QualifiedName
		public Group getGroup_1() { return cGroup_1; }

		//{AttributeValue}
		public Action getAttributeValueAction_1_0() { return cAttributeValueAction_1_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_1_0() { return cNameQualifiedNameParserRuleCall_1_1_0; }
	}
	
	
	private final DataModelElements pDataModel;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final AttributeGroupElements pAttributeGroup;
	private final QualifiedNameElements pQualifiedName;
	private final AssociationElements pAssociation;
	private final ConstraintElements pConstraint;
	private final CardinalityElements pCardinality;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DataGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataModel = new DataModelElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeGroup = new AttributeGroupElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pAssociation = new AssociationElements();
		this.pConstraint = new ConstraintElements();
		this.pCardinality = new CardinalityElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.blended.data.Data".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataModel:
	//	entities+=Entity* associations+=Association* constraint+=Constraint*;
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}

	//Entity:
	//	"Entityy" name=ID exists?="exists"? ("dependsOn" dependsOn=[Entity])? "{" attributes+=(AttributeGroup | Attribute)*
	//	"}";
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Attribute:
	//	name=QualifiedName ":" type=ID mandatory?="mandatory"? ("dependsOn" dependsOn+=[Attribute|QualifiedName] (","
	//	dependsOn+=[Attribute|QualifiedName])*)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AttributeGroup:
	//	"group" mandatory?="mandatory"? ("dependsOn" dependsOn+=[Attribute|QualifiedName] (","
	//	dependsOn+=[Attribute|QualifiedName])*)? "{" attributes+=Attribute+ "}";
	public AttributeGroupElements getAttributeGroupAccess() {
		return pAttributeGroup;
	}
	
	public ParserRule getAttributeGroupRule() {
		return getAttributeGroupAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Association:
	//	"Association" "{" entity1=[Entity] "with" name1=ID "(" cardinality1=Cardinality ")" entity2=[Entity] "with" name2=ID
	//	"(" cardinality2=Cardinality ")" "}";
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}

	//Constraint:
	//	"Constraint" ":" constraint=Expression;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Cardinality:
	//	INT | INT ".." INT | INT ".." "*" | INT ".." "+";
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Or returns Expression:
	//	And ({Or.left=current} "OR" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression:
	//	Primary ({And.left=current} "AND" right=Primary)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Primary returns Expression:
	//	"(" Expression ")" | {Not} "NOT" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Atomic returns Expression:
	//	{AttributeDefinition} "DEF" "(" name=QualifiedName ")" | {AttributeValue} name=QualifiedName;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
