/**
 * generated by Xtext
 */
package org.blended.data.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.blended.data.data.And;
import org.blended.data.data.Association;
import org.blended.data.data.Attribute;
import org.blended.data.data.AttributeDefinition;
import org.blended.data.data.AttributeGroup;
import org.blended.data.data.AttributeValue;
import org.blended.data.data.Constraint;
import org.blended.data.data.Entity;
import org.blended.data.data.Expression;
import org.blended.data.data.Not;
import org.blended.data.data.Or;
import org.blended.generator.CustomOutputConfigurationProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DataGeneratorConditionModel {
  private Resource resource;
  
  private IFileSystemAccess fsa;
  
  private StringBuilder sb;
  
  public DataGeneratorConditionModel(final Resource resource, final IFileSystemAccess fsa) {
    this.resource = resource;
    this.fsa = fsa;
    StringBuilder _stringBuilder = new StringBuilder();
    this.sb = _stringBuilder;
  }
  
  public void doGenerate() {
    this.sb.append("ENTITY_ACHIEVE_CONDITIONS\r\n");
    TreeIterator<EObject> _allContents = this.resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Entity> _filter = Iterables.<Entity>filter(_iterable, Entity.class);
    for (final Entity r : _filter) {
      boolean _isExists = r.isExists();
      boolean _not = (!_isExists);
      if (_not) {
        CharSequence _entityAchieveCondition = this.entityAchieveCondition(r);
        StringBuilder entity = new StringBuilder(_entityAchieveCondition);
        this.sb.append(("\t" + entity));
      } else {
        CharSequence _entityAchieveConditionExists = this.entityAchieveConditionExists(r);
        StringBuilder entity_1 = new StringBuilder(_entityAchieveConditionExists);
        this.sb.append(("\t" + entity_1));
      }
    }
    this.sb.append("\r\nENTITY_INVARIANT_CONDITIONS\r\n");
    TreeIterator<EObject> _allContents_1 = this.resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<Association> _filter_1 = Iterables.<Association>filter(_iterable_1, Association.class);
    for (final Association r_1 : _filter_1) {
      {
        Entity _entity1 = r_1.getEntity1();
        boolean _isExists_1 = _entity1.isExists();
        boolean _not_1 = (!_isExists_1);
        if (_not_1) {
          CharSequence _entityInvariantCondition1 = this.entityInvariantCondition1(r_1);
          StringBuilder association = new StringBuilder(_entityInvariantCondition1);
          this.sb.append(("\t" + association));
        }
        Entity _entity2 = r_1.getEntity2();
        boolean _isExists_2 = _entity2.isExists();
        boolean _not_2 = (!_isExists_2);
        if (_not_2) {
          CharSequence _entityInvariantCondition2 = this.entityInvariantCondition2(r_1);
          StringBuilder association_1 = new StringBuilder(_entityInvariantCondition2);
          this.sb.append(("\t" + association_1));
        }
      }
    }
    this.sb.append("\r\nENTITY_DEPENDENCE_CONDITIONS\r\n");
    TreeIterator<EObject> _allContents_2 = this.resource.getAllContents();
    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<Entity> _filter_2 = Iterables.<Entity>filter(_iterable_2, Entity.class);
    for (final Entity r_2 : _filter_2) {
      boolean _and = false;
      boolean _isExists_1 = r_2.isExists();
      boolean _not_1 = (!_isExists_1);
      if (!_not_1) {
        _and = false;
      } else {
        Entity _dependsOn = r_2.getDependsOn();
        boolean _notEquals = (!Objects.equal(_dependsOn, null));
        _and = _notEquals;
      }
      if (_and) {
        CharSequence _entityDependenceCondition = this.entityDependenceCondition(r_2);
        StringBuilder entity_2 = new StringBuilder(_entityDependenceCondition);
        this.sb.append(("\t" + entity_2));
      }
    }
    this.sb.append("\r\nATTRIBUTE_ACHIEVE_CONDITIONS\r\n");
    TreeIterator<EObject> _allContents_3 = this.resource.getAllContents();
    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<Entity> _filter_3 = Iterables.<Entity>filter(_iterable_3, Entity.class);
    for (final Entity r_3 : _filter_3) {
      boolean _isExists_2 = r_3.isExists();
      boolean _not_2 = (!_isExists_2);
      if (_not_2) {
        EList<EObject> _attributes = r_3.getAttributes();
        for (final EObject a : _attributes) {
          if ((a instanceof Attribute)) {
            CharSequence _attributeAchieveCondition = this.attributeAchieveCondition(r_3, ((Attribute)a));
            StringBuilder attribute = new StringBuilder(_attributeAchieveCondition);
            this.sb.append(("\t" + attribute));
          }
        }
      }
    }
    TreeIterator<EObject> _allContents_4 = this.resource.getAllContents();
    Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
    Iterable<Entity> _filter_4 = Iterables.<Entity>filter(_iterable_4, Entity.class);
    for (final Entity r_4 : _filter_4) {
      boolean _isExists_3 = r_4.isExists();
      boolean _not_3 = (!_isExists_3);
      if (_not_3) {
        EList<EObject> _attributes_1 = r_4.getAttributes();
        for (final EObject ag : _attributes_1) {
          if ((ag instanceof AttributeGroup)) {
            StringBuilder s = new StringBuilder();
            int i = 1;
            EList<Attribute> _attributes_2 = ((AttributeGroup)ag).getAttributes();
            for (final Attribute a_1 : _attributes_2) {
              if ((i == 1)) {
                EObject _eContainer = ((AttributeGroup)ag).eContainer();
                String _name = ((Entity) _eContainer).getName();
                String _plus = (_name + ".");
                String _name_1 = a_1.getName();
                String _plus_1 = (_plus + _name_1);
                s.append(_plus_1);
                i++;
              } else {
                EObject _eContainer_1 = ((AttributeGroup)ag).eContainer();
                String _name_2 = ((Entity) _eContainer_1).getName();
                String _plus_2 = (", " + _name_2);
                String _plus_3 = (_plus_2 + ".");
                String _name_3 = a_1.getName();
                String _plus_4 = (_plus_3 + _name_3);
                s.append(_plus_4);
              }
            }
            String _string = s.toString();
            boolean _isMandatory = ((AttributeGroup)ag).isMandatory();
            CharSequence _attributeAchieveCondition_1 = this.attributeAchieveCondition(_string, Boolean.valueOf(_isMandatory));
            StringBuilder attribute_1 = new StringBuilder(_attributeAchieveCondition_1);
            this.sb.append(("\t" + attribute_1));
          }
        }
      }
    }
    this.sb.append("\r\nATTRIBUTE_INVARIANT_CONDITIONS\r\n");
    TreeIterator<EObject> _allContents_5 = this.resource.getAllContents();
    Iterable<EObject> _iterable_5 = IteratorExtensions.<EObject>toIterable(_allContents_5);
    Iterable<Constraint> _filter_5 = Iterables.<Constraint>filter(_iterable_5, Constraint.class);
    for (final Constraint r_5 : _filter_5) {
      {
        CharSequence _attributeInvariantCondition = this.attributeInvariantCondition(r_5);
        StringBuilder attribute_2 = new StringBuilder(_attributeInvariantCondition);
        this.sb.append(("\t" + attribute_2));
      }
    }
    this.sb.append("\r\nATTRIBUTE_DEPENDENCE_CONDITIONS\r\n");
    TreeIterator<EObject> _allContents_6 = this.resource.getAllContents();
    Iterable<EObject> _iterable_6 = IteratorExtensions.<EObject>toIterable(_allContents_6);
    Iterable<Entity> _filter_6 = Iterables.<Entity>filter(_iterable_6, Entity.class);
    for (final Entity e : _filter_6) {
      boolean _isExists_4 = e.isExists();
      boolean _not_4 = (!_isExists_4);
      if (_not_4) {
        EList<EObject> _attributes_3 = e.getAttributes();
        for (final EObject ab : _attributes_3) {
          {
            if ((ab instanceof Attribute)) {
              StringBuilder b = new StringBuilder();
              int i_1 = 1;
              EList<Attribute> _dependsOn_1 = ((Attribute)ab).getDependsOn();
              int _size = _dependsOn_1.size();
              boolean _greaterThan = (_size > 0);
              if (_greaterThan) {
                EList<Attribute> _dependsOn_2 = ((Attribute)ab).getDependsOn();
                for (final Attribute d : _dependsOn_2) {
                  if ((i_1 == 1)) {
                    EObject _eContainer_2 = d.eContainer();
                    String _name_4 = ((Entity) _eContainer_2).getName();
                    String _plus_5 = (_name_4 + ".");
                    String _name_5 = d.getName();
                    String _plus_6 = (_plus_5 + _name_5);
                    b.append(_plus_6);
                    i_1++;
                  } else {
                    EObject _eContainer_3 = d.eContainer();
                    String _name_6 = ((Entity) _eContainer_3).getName();
                    String _plus_7 = (", " + _name_6);
                    String _plus_8 = (_plus_7 + ".");
                    String _name_7 = d.getName();
                    String _plus_9 = (_plus_8 + _name_7);
                    b.append(_plus_9);
                  }
                }
                String _name_8 = e.getName();
                String _plus_10 = (_name_8 + ".");
                String _name_9 = ((Attribute)ab).getName();
                String _plus_11 = (_plus_10 + _name_9);
                String _string_1 = b.toString();
                CharSequence _attributeDependenceCondition = this.attributeDependenceCondition(_plus_11, _string_1);
                StringBuilder entity_3 = new StringBuilder(_attributeDependenceCondition);
                this.sb.append(("\t" + entity_3));
              }
            }
            if ((ab instanceof AttributeGroup)) {
              StringBuilder a_2 = new StringBuilder();
              StringBuilder b_1 = new StringBuilder();
              EList<Attribute> _dependsOn_3 = ((AttributeGroup)ab).getDependsOn();
              int _size_1 = _dependsOn_3.size();
              boolean _greaterThan_1 = (_size_1 > 0);
              if (_greaterThan_1) {
                int i_2 = 1;
                EList<Attribute> _attributes_4 = ((AttributeGroup)ab).getAttributes();
                for (final Attribute att : _attributes_4) {
                  if ((i_2 == 1)) {
                    String _name_10 = e.getName();
                    String _plus_12 = (_name_10 + ".");
                    String _name_11 = att.getName();
                    String _plus_13 = (_plus_12 + _name_11);
                    a_2.append(_plus_13);
                    i_2++;
                  } else {
                    String _name_12 = e.getName();
                    String _plus_14 = (", " + _name_12);
                    String _plus_15 = (_plus_14 + ".");
                    String _name_13 = att.getName();
                    String _plus_16 = (_plus_15 + _name_13);
                    a_2.append(_plus_16);
                  }
                }
                i_2 = 1;
                EList<Attribute> _dependsOn_4 = ((AttributeGroup)ab).getDependsOn();
                for (final Attribute d_1 : _dependsOn_4) {
                  if ((i_2 == 1)) {
                    EObject _eContainer_4 = d_1.eContainer();
                    String _name_14 = ((Entity) _eContainer_4).getName();
                    String _plus_17 = (_name_14 + ".");
                    String _name_15 = d_1.getName();
                    String _plus_18 = (_plus_17 + _name_15);
                    b_1.append(_plus_18);
                    i_2++;
                  } else {
                    EObject _eContainer_5 = d_1.eContainer();
                    String _name_16 = ((Entity) _eContainer_5).getName();
                    String _plus_19 = (", " + _name_16);
                    String _plus_20 = (_plus_19 + ".");
                    String _name_17 = d_1.getName();
                    String _plus_21 = (_plus_20 + _name_17);
                    b_1.append(_plus_21);
                  }
                }
                String _string_2 = a_2.toString();
                String _string_3 = b_1.toString();
                CharSequence _attributeDependenceCondition_1 = this.attributeDependenceCondition(_string_2, _string_3);
                StringBuilder entity_4 = new StringBuilder(_attributeDependenceCondition_1);
                this.sb.append(("\t" + entity_4));
              }
            }
          }
        }
      }
    }
    URI _normalizedURI = EcoreUtil2.getNormalizedURI(this.resource);
    String _lastSegment = _normalizedURI.lastSegment();
    String _replace = _lastSegment.replace(".dm", ".cm");
    String _string_1 = this.sb.toString();
    this.fsa.generateFile(_replace, CustomOutputConfigurationProvider.SRC_OUTPUT, _string_1);
  }
  
  public CharSequence entityAchieveCondition(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("DEF(");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append(")\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence entityAchieveConditionExists(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("EXISTS(DEF(");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append("))");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence entityInvariantCondition1(final Association a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("MUL(");
    Entity _entity1 = a.getEntity1();
    String _name = _entity1.getName();
    _builder.append(_name, "");
    _builder.append(".");
    String _name2 = a.getName2();
    _builder.append(_name2, "");
    _builder.append(", ");
    String _cardinality2 = a.getCardinality2();
    _builder.append(_cardinality2, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence entityInvariantCondition2(final Association a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("MUL(");
    Entity _entity2 = a.getEntity2();
    String _name = _entity2.getName();
    _builder.append(_name, "");
    _builder.append(".");
    String _name1 = a.getName1();
    _builder.append(_name1, "");
    _builder.append(", ");
    String _cardinality1 = a.getCardinality1();
    _builder.append(_cardinality1, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence entityDependenceCondition(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("DEP(DEF(");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append("), DEF(");
    Entity _dependsOn = e.getDependsOn();
    String _name_1 = _dependsOn.getName();
    _builder.append(_name_1, "");
    _builder.append("))\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence attributeAchieveCondition(final Entity e, final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isMandatory = a.isMandatory();
      if (_isMandatory) {
        _builder.append("MAN(DEF(");
        String _name = e.getName();
        _builder.append(_name, "");
        _builder.append(".");
        String _name_1 = a.getName();
        _builder.append(_name_1, "");
        _builder.append("))");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("DEF(");
        String _name_2 = e.getName();
        _builder.append(_name_2, "");
        _builder.append(".");
        String _name_3 = a.getName();
        _builder.append(_name_3, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence attributeAchieveCondition(final String s, final Boolean mandatory) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((mandatory).booleanValue()) {
        _builder.append("MAN(DEF(");
        _builder.append(s, "");
        _builder.append("))");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("DEF(");
        _builder.append(s, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence attributeAchieveConditionGrouped(final String s, final Boolean mandatory) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((mandatory).booleanValue()) {
        _builder.append("MAN(DEF(");
        _builder.append(s, "");
        _builder.append("))");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("DEF(");
        _builder.append(s, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence attributeInvariantCondition(final Constraint c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("RUL(");
    Expression _constraint = c.getConstraint();
    String _completeExpression = DataGeneratorConditionModel.getCompleteExpression(_constraint);
    _builder.append(_completeExpression, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence attributeDependenceCondition(final String a, final String b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("DEP(DEF(");
    _builder.append(a, "");
    _builder.append("), DEF(");
    _builder.append(b, "");
    _builder.append("))");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public static String getCompleteExpression(final Expression e) {
    StringBuilder sb = new StringBuilder();
    DataGeneratorConditionModel.getCompleteExpression(e, sb);
    return sb.toString();
  }
  
  public static Object getCompleteExpression(final Expression e, final StringBuilder sb) {
    StringBuilder _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (e instanceof AttributeDefinition) {
        _matched=true;
        String _name = ((AttributeDefinition)e).getName();
        String _plus = ("DEF(" + _name);
        String _plus_1 = (_plus + ")");
        _switchResult = sb.append(_plus_1);
      }
    }
    if (!_matched) {
      if (e instanceof AttributeValue) {
        _matched=true;
        String _name = ((AttributeValue)e).getName();
        _switchResult = sb.append(_name);
      }
    }
    if (!_matched) {
      if (e instanceof Not) {
        _matched=true;
        StringBuilder _xblockexpression = null;
        {
          sb.append("NOT (");
          Expression _expression = ((Not)e).getExpression();
          DataGeneratorConditionModel.getCompleteExpression(_expression, sb);
          _xblockexpression = sb.append(")");
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (e instanceof And) {
        _matched=true;
        StringBuilder _xblockexpression = null;
        {
          sb.append("(");
          Expression _left = ((And)e).getLeft();
          DataGeneratorConditionModel.getCompleteExpression(_left, sb);
          sb.append(") AND (");
          Expression _right = ((And)e).getRight();
          DataGeneratorConditionModel.getCompleteExpression(_right, sb);
          _xblockexpression = sb.append(")");
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (e instanceof Or) {
        _matched=true;
        StringBuilder _xblockexpression = null;
        {
          sb.append("(");
          Expression _left = ((Or)e).getLeft();
          DataGeneratorConditionModel.getCompleteExpression(_left, sb);
          sb.append(") OR (");
          Expression _right = ((Or)e).getRight();
          DataGeneratorConditionModel.getCompleteExpression(_right, sb);
          _xblockexpression = sb.append(")");
        }
        _switchResult = _xblockexpression;
      }
    }
    return _switchResult;
  }
}
