/**
 * generated by Xtext
 */
package org.blended.data.formatting;

import java.util.List;
import java.util.function.Consumer;
import org.blended.data.services.DataGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class DataFormatter extends AbstractDeclarativeFormatter {
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    IGrammarAccess _grammarAccess = this.getGrammarAccess();
    DataGrammarAccess f = ((DataGrammarAccess) _grammarAccess);
    c.setAutoLinewrap(130);
    List<Keyword> _findKeywords = f.findKeywords("{");
    for (final Keyword key : _findKeywords) {
      FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap();
      _setLinewrap.after(key);
    }
    List<Keyword> _findKeywords_1 = f.findKeywords("}");
    for (final Keyword key_1 : _findKeywords_1) {
      {
        FormattingConfig.LinewrapLocator _setLinewrap_1 = c.setLinewrap();
        _setLinewrap_1.before(key_1);
        FormattingConfig.LinewrapLocator _setLinewrap_2 = c.setLinewrap(2);
        _setLinewrap_2.after(key_1);
      }
    }
    List<Keyword> _findKeywords_2 = f.findKeywords("(");
    for (final Keyword key_2 : _findKeywords_2) {
      FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
      _setNoSpace.after(key_2);
    }
    List<Keyword> _findKeywords_3 = f.findKeywords(")");
    for (final Keyword key_3 : _findKeywords_3) {
      {
        FormattingConfig.NoSpaceLocator _setNoSpace_1 = c.setNoSpace();
        _setNoSpace_1.before(key_3);
        FormattingConfig.LinewrapLocator _setLinewrap_1 = c.setLinewrap();
        _setLinewrap_1.after(key_3);
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs = f.findKeywordPairs("{", "}");
    final Consumer<Pair<Keyword, Keyword>> _function = new Consumer<Pair<Keyword, Keyword>>() {
      @Override
      public void accept(final Pair<Keyword, Keyword> it) {
        Keyword _first = it.getFirst();
        Keyword _second = it.getSecond();
        c.setIndentation(_first, _second);
      }
    };
    _findKeywordPairs.forEach(_function);
    FormattingConfig.LinewrapLocator _setLinewrap_1 = c.setLinewrap();
    ParserRule _attributeRule = f.getAttributeRule();
    _setLinewrap_1.before(_attributeRule);
    FormattingConfig.LinewrapLocator _setLinewrap_2 = c.setLinewrap();
    ParserRule _associationRule = f.getAssociationRule();
    _setLinewrap_2.before(_associationRule);
  }
}
