/**
 * generated by Xtext
 */
package org.blended.condition.ui.labeling;

import com.google.inject.Inject;
import org.blended.blended.And;
import org.blended.blended.AttributeAchieveCondition;
import org.blended.blended.AttributeDependenceCondition;
import org.blended.blended.AttributeInvariantCondition;
import org.blended.blended.Condition;
import org.blended.blended.EntityAchieveCondition;
import org.blended.blended.EntityDependenceCondition;
import org.blended.blended.EntityInvariantCondition;
import org.blended.blended.Not;
import org.blended.blended.Or;
import org.blended.condition.condition.ConditionModel;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class ConditionLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public ConditionLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String image(final ConditionModel cm) {
    return "condition.gif";
  }
  
  public String text(final ConditionModel cm) {
    return "Conditions";
  }
  
  public String image(final Condition c) {
    return "condition.gif";
  }
  
  public String text(final Condition c) {
    return "For Entities and Attributes";
  }
  
  public String image(final EntityAchieveCondition eac) {
    return "LetterABlue.png";
  }
  
  public String text(final EntityAchieveCondition eac) {
    String _name = eac.getName();
    String _plus = ("Achieve: [" + _name);
    return (_plus + "]");
  }
  
  public String image(final EntityInvariantCondition eic) {
    return "LetterIBlue.png";
  }
  
  public String text(final EntityInvariantCondition eic) {
    String _name = eic.getName();
    String _plus = ("Invariant for: [" + _name);
    return (_plus + "]");
  }
  
  public String image(final EntityDependenceCondition edc) {
    return "LetterDBlue.png";
  }
  
  public String text(final EntityDependenceCondition edc) {
    String _entity2 = edc.getEntity2();
    String _plus = ("Dependence on: [" + _entity2);
    return (_plus + "]");
  }
  
  public String image(final AttributeAchieveCondition aac) {
    return "LetterAGreen.png";
  }
  
  public String text(final AttributeAchieveCondition aac) {
    EList<String> _conditions = aac.getConditions();
    return ("Achieve: " + _conditions);
  }
  
  public String image(final AttributeInvariantCondition aic) {
    return "LetterIGreen.png";
  }
  
  public String text(final AttributeInvariantCondition aic) {
    return "Invariant for attribute";
  }
  
  public String text(final And and) {
    return "AND";
  }
  
  public String text(final Or or) {
    return "OR";
  }
  
  public String text(final Not not) {
    return "NOT";
  }
  
  public String image(final AttributeDependenceCondition adc) {
    return "LetterDGreen.png";
  }
  
  public String text(final AttributeDependenceCondition edc) {
    String _attribute2 = edc.getAttribute2();
    String _plus = ("Dependence on: [" + _attribute2);
    return (_plus + "]");
  }
}
